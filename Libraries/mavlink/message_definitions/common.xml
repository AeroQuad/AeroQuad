<?xml version="1.0"?>
<mavlink>
<version>2</version>

<enums>
   <enum name="MAV_COMMAND" >
      <description>Commands to be executed by the MAV. They can be executed on user request,
      or as part of a mission script. If the action is used in a mission, the parameter mapping
      to the waypoint/mission message is as follows: 
      Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7.
      </description>
      <entry name="MAV_CMD_NAV_WAYPOINT" value="16">
        <description>Navigate to waypoint.</description>
        <param index="1">Hold time (ignored by fixed wing, time to stay at waypoint for rotary wing)</param>
        <param index="2">Acceptance radius (if the sphere with this radius is hit, the waypoint counts as reached)</param>
        <param index="3">0 to pass through the WP, if > 0 radius to pass by WP. Allows trajectory control.</param>
        <param index="4">Desired yaw angle</param>
        <param index="5">Latitude</param>
        <param index="6">Longitude</param>
        <param index="7">Altitude</param>
      </entry>
      <entry name="MAV_CMD_NAV_LOITER_UNLIM" value="17">
        <description>Loiter around this waypoint an unlimited amount of time</description>
        <param index="1">Empty</param>
        <param index="2">Empty</param>
        <param index="3">Radius around waypoint, in meters. If positive loiter clockwise, else counter-clockwise</param>
        <param index="4">Desired yaw angle.</param>
        <param index="5">Latitude</param>
        <param index="6">Longitude</param>
        <param index="7">Altitude</param>
      </entry>
      <entry name="MAV_CMD_NAV_LOITER_TURNS"  value="18">
        <description>Loiter around this waypoint for X turns</description>
        <param index="1">Turns</param>
        <param index="2">Empty</param>
        <param index="3">Radius around waypoint, in meters. If positive loiter clockwise, else counter-clockwise</param>
        <param index="4">Desired yaw angle.</param>
        <param index="5">Latitude</param>
        <param index="6">Longitude</param>
        <param index="7">Altitude</param>
      </entry>
      <entry name="MAV_CMD_NAV_LOITER_TIME"  value="19">
        <description>Loiter around this waypoint for X seconds</description>
        <param index="1">Seconds (decimal)</param>
        <param index="2">Empty</param>
        <param index="3">Radius around waypoint, in meters. If positive loiter clockwise, else counter-clockwise</param>
        <param index="4">Desired yaw angle.</param>
        <param index="5">Latitude</param>
        <param index="6">Longitude</param>
        <param index="7">Altitude</param>
      </entry>
      <entry name="MAV_CMD_NAV_RETURN_TO_LAUNCH"  value="20">
        <description>Return to launch location</description>
        <param index="1">Empty</param>
        <param index="2">Empty</param>
        <param index="3">Empty</param>
        <param index="4">Empty</param>
        <param index="5">Empty</param>
        <param index="6">Empty</param>
        <param index="7">Empty</param>
      </entry>
      <entry name="MAV_CMD_NAV_LAND"  value="21">
      <description>Land at location</description>
        <param index="1">Empty</param>
        <param index="2">Empty</param>
        <param index="3">Empty</param>
        <param index="4">Desired yaw angle.</param>
        <param index="5">Latitude</param>
        <param index="6">Longitude</param>
        <param index="7">Altitude</param>
      </entry>
      <entry name="MAV_CMD_NAV_TAKEOFF"  value="22">
        <description>Takeoff from ground / hand</description>
        <param index="1">Minimum pitch (if airspeed sensor present), desired pitch without sensor</param>
        <param index="2">Empty</param>
        <param index="3">Empty</param>
        <param index="4">Yaw angle (if magnetometer present), ignored without magnetometer</param>
        <param index="5">Latitude</param>
        <param index="6">Longitude</param>
        <param index="7">Altitude</param>
        </entry>
      <entry name="MAV_CMD_NAV_DELAY"  value="32">
      <description>Delay mission state machine.</description>
        <param index="1">Delay in seconds (decimal)</param>
        <param index="2">Empty</param>
        <param index="3">Empty</param>
        <param index="4">Empty</param>
        <param index="5">Empty</param>
        <param index="6">Empty</param>
        <param index="7">Empty</param>
      </entry>
      <entry name="MAV_CMD_NAV_CHANGE_ALT" value="33">
        <description>Ascend/descend at rate.</description>
        <param index="1">Descent / Ascend rate (m/s)</param>
        <param index="2">Empty</param>
        <param index="3">Empty</param>
        <param index="4">Empty</param>
        <param index="5">Empty</param>
        <param index="6">Empty</param>
        <param index="7">Finish Altitude</param>
      </entry>
      <entry name="MAV_CMD_SYS_SET_MODE" value="34">
        <description>Set system mode.</description>
        <param index="1">Mode, as defined by ENUM MAV_MODE</param>
        <param index="2">Empty</param>
        <param index="3">Empty</param>
        <param index="4">Empty</param>
        <param index="5">Empty</param>
        <param index="6">Empty</param>
        <param index="7">Empty</param>
      </entry>
   </enum>
   <enum name="MAV_DATA_STREAM">
     <description>Data stream IDs. A data stream is not a fixed set of messages, but rather a
     recommendation to the autopilot software. Individual autopilot might or might not obey
     the recommended messages.
     </description>
     <entry name="MAV_DATA_STREAM_ALL" value="0"><description>Enable all data streams</description></entry>
     <entry name="MAV_DATA_STREAM_RAW_SENSORS" value="1"><description>Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.</description></entry>
     <entry name="MAV_DATA_STREAM_EXTENDED_STATUS" value="2"><description>Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS</description></entry>
     <entry name="MAV_DATA_STREAM_RC_CHANNELS" value="3"><description>Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW</description></entry>
     <entry name="MAV_DATA_STREAM_RAW_CONTROLLER" value="4"><description>Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT.</description></entry>
     <entry name="MAV_DATA_STREAM_POSITION" value="6"><description>Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.</description></entry>
     <entry name="MAV_DATA_STREAM_EXTRA1" value="250"><description>Dependent on the autopilot</description></entry>
     <entry name="MAV_DATA_STREAM_EXTRA2" value="251"><description>Dependent on the autopilot</description></entry>
     <entry name="MAV_DATA_STREAM_EXTRA3" value="252"><description>Dependent on the autopilot</description></entry>
   </enum>
</enums>

<messages>
   <message name="HEARTBEAT" id="0">
     <description>The heartbeat message shows that a system is present and responding. The type of the MAV and Autopilot hardware allow the receiving system to treat further messages from this system appropriate (e.g. by laying out the user interface based on the autopilot).</description>
     <field name="type" type="uint8_t">Type of the MAV (quadrotor, helicopter, etc., up to 15 types, defined in MAV_TYPE ENUM)</field>
     <field name="autopilot" type="uint8_t">Type of the Autopilot: 0: Generic, 1: PIXHAWK, 2: SLUGS, 3: Ardupilot (up to 15 types), defined in MAV_AUTOPILOT_TYPE ENUM</field>
     <field name="mavlink_version" type="uint8_t_mavlink_version">MAVLink version</field>
   </message>
 
   <message name="BOOT" id="1">
	<description>The boot message indicates that a system is starting. The onboard software version allows to keep track of onboard soft/firmware revisions.</description>
     <field name="version" type="uint32_t">The onboard software version</field>
   </message>

   <message name="SYSTEM_TIME" id="2">
     <description>The system time is the time of the master clock, typically the computer clock of the main onboard computer.</description>
     <field name="time_usec" type="uint64_t">Timestamp of the master clock in microseconds since UNIX epoch.</field>
   </message>

   <message name="PING" id="3">
     <description>A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections.</description>
     <field name="seq" type="uint32_t">PING sequence</field>
     <field name="target_system" type="uint8_t">0: request ping from all receiving systems, if greater than 0: message is a ping response and number is the system id of the requesting system</field>
     <field name="target_component" type="uint8_t">0: request ping from all receiving components, if greater than 0: message is a ping response and number is the system id of the requesting system</field>
     <field name="time" type="uint64_t">Unix timestamp in microseconds</field>
   </message>
   
        <message name="SYSTEM_TIME_UTC" id="4">
    <description>UTC date and time from GPS module</description>
    <field name="utc_date" type="uint32_t">GPS UTC date ddmmyy</field>
    <field name="utc_time" type="uint32_t">GPS UTC time hhmmss</field>
  </message>
  
     <message name="ACTION_ACK" id="9">
	<description>This message acknowledges an action. IMPORTANT: The acknowledgement can be also negative, e.g. the MAV rejects a reset message because it is in-flight. The action ids are defined in ENUM MAV_ACTION in mavlink/include/mavlink_types.h</description>
     <field name="action" type="uint8_t">The action id</field>
     <field name="result" type="uint8_t">0: Action DENIED, 1: Action executed</field>
   </message>

   <message name="ACTION" id="10">
	<description>An action message allows to execute a certain onboard action. These include liftoff, land, storing parameters too EEPROM, shutddown, etc. The action ids are defined in ENUM MAV_ACTION in mavlink/include/mavlink_types.h</description>
     <field name="target" type="uint8_t">The system executing the action</field>
     <field name="target_component" type="uint8_t">The component executing the action</field>
     <field name="action" type="uint8_t">The action id</field>
   </message>

   <message name="SET_MODE" id="11">
   <description>Set the system mode, as defined by enum MAV_MODE in mavlink/include/mavlink_types.h. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.</description>
     <field name="target" type="uint8_t">The system setting the mode</field>
     <field name="mode" type="uint8_t">The new mode</field>
   </message>

   <message name="SET_NAV_MODE" id="12">
   <description>Set the system navigation mode, as defined by enum MAV_NAV_MODE in mavlink/include/mavlink_types.h. The navigation mode applies to the whole aircraft and thus all components.</description>
     <field name="target" type="uint8_t">The system setting the mode</field>
     <field name="nav_mode" type="uint8_t">The new navigation mode</field>
   </message>
   
   <message name="PARAM_REQUEST_READ" id="20">
     <description>Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also http://qgroundcontrol.org/parameter_interface for a full documentation of QGroundControl and IMU code.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="param_id" type="array[15]">Onboard parameter id</field>
     <field name="param_index" type="uint16_t">Parameter index</field>
   </message>

   <message name="PARAM_REQUEST_LIST" id="21">
     <description>Request all parameters of this component. After his request, all parameters are emitted.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
   </message>

   <message name="PARAM_VALUE" id="22">
     <description>Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout.</description>
     <field name="param_id" type="array[15]">Onboard parameter id</field>
     <field name="param_value" type="float">Onboard parameter value</field>
     <field name="param_count" type="uint16_t">Total number of onboard parameters</field>
     <field name="param_index" type="uint16_t">Index of this onboard parameter</field>
   </message>

   <message name="PARAM_SET" id="23">
     <description>Set a parameter value TEMPORARILY to RAM. It will be reset to default on system reboot. Send the ACTION MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM contents to EEPROM. IMPORTANT: The receiving component should acknowledge the new parameter value by sending a param_value message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="param_id" type="array[15]">Onboard parameter id</field>
     <field name="param_value" type="float">Onboard parameter value</field>
   </message>
   
         <message name="GPS_RAW_INT" id="25">
     <description>The global position, as returned by the Global Positioning System (GPS). This is
NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame)</description>
     <field name="usec" type="uint64_t">Timestamp (microseconds since UNIX epoch or microseconds since system boot)</field>
     <field name="fix_type" type="uint8_t">0-1: no fix, 2: 2D fix, 3: 3D fix</field>
     <field name="lat"   type="uint32_t">Latitude in 1E7 degrees</field>
     <field name="lon"   type="uint32_t">Longitude in 1E7 degrees</field>
     <field name="alt"   type="float">Altitude in meters</field>
     <field name="eph"  type="float">GPS HDOP</field>
     <field name="epv"  type="float">GPS VDOP</field>
     <field name="v"  type="float">GPS ground speed (m/s)</field>
     <field name="hdg"  type="float">Compass heading in degrees, 0..360 degrees</field>
   </message>
   
   <message name="SCALED_IMU" id="26">
     <description>The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units</description>
     <field name="usec"  type="uint64_t">Timestamp (microseconds since UNIX epoch or microseconds since system boot)</field>
     <field name="xacc"  type="int16_t">X acceleration (mg)</field>
     <field name="yacc"  type="int16_t">Y acceleration (mg)</field>
     <field name="zacc"  type="int16_t">Z acceleration (mg)</field>
     <field name="xgyro" type="int16_t">Angular speed around X axis (millirad /sec)</field>
     <field name="ygyro" type="int16_t">Angular speed around Y axis (millirad /sec)</field>
     <field name="zgyro" type="int16_t">Angular speed around Z axis (millirad /sec)</field>
     <field name="xmag"  type="int16_t">X Magnetic field (milli tesla)</field>
     <field name="ymag"  type="int16_t">Y Magnetic field (milli tesla)</field>
     <field name="zmag"  type="int16_t">Z Magnetic field (milli tesla)</field>
   </message>
   
   <message name="GPS_STATUS" id="27">
     <description>The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.</description>
     <field name="satellites_visible"   type="uint8_t">Number of satellites visible</field>
     <field name="satellite_prn"   type="array[20]">Global satellite ID</field>
     <field name="satellite_used"   type="array[20]">0: Satellite not used, 1: used for localization</field>
     <field name="satellite_elevation"   type="array[20]">Elevation (0: right on top of receiver, 90: on the horizon) of satellite</field>
     <field name="satellite_azimuth"  type="array[20]">Direction of satellite, 0: 0 deg, 255: 360 deg.</field>
     <field name="satellite_snr"  type="array[20]">Signal to noise ratio of satellite</field>
   </message>

   <message name="RAW_IMU" id="28">
     <description>The RAW IMU readings for the usual 9DOF sensor setup. This message should always contain the true raw values without any scaling to allow data capture and system debugging.</description>
     <field name="usec"  type="uint64_t">Timestamp (microseconds since UNIX epoch or microseconds since system boot)</field>
     <field name="xacc"  type="int16_t">X acceleration (raw)</field>
     <field name="yacc"  type="int16_t">Y acceleration (raw)</field>
     <field name="zacc"  type="int16_t">Z acceleration (raw)</field>
     <field name="xgyro" type="int16_t">Angular speed around X axis (raw)</field>
     <field name="ygyro" type="int16_t">Angular speed around Y axis (raw)</field>
     <field name="zgyro" type="int16_t">Angular speed around Z axis (raw)</field>
     <field name="xmag"  type="int16_t">X Magnetic field (raw)</field>
     <field name="ymag"  type="int16_t">Y Magnetic field (raw)</field>
     <field name="zmag"  type="int16_t">Z Magnetic field (raw)</field>
   </message>

  <message name="RAW_PRESSURE" id="29">
     <description>The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, unscaled ADC values.</description>
     <field name="usec"  type="uint64_t">Timestamp (microseconds since UNIX epoch or microseconds since system boot)</field>
     <field name="press_abs"  type="float">Absolute pressure (hectopascal)</field>
     <field name="press_diff1"  type="float">Differential pressure 1 (hectopascal)</field>
     <field name="press_diff2"  type="float">Differential pressure 2 (hectopascal)</field>
     <field name="temperature"  type="int16_t">Raw Temperature measurement (0.01 degrees celsius per tick is default unit)</field>
   </message>

   <message name="ATTITUDE" id="30">
    <description>The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).</description>
     <field name="usec"  type="uint64_t">Timestamp (microseconds since UNIX epoch or microseconds since system boot)</field>
     <field name="roll"  type="float">Roll angle (rad)</field>
     <field name="pitch" type="float">Pitch angle (rad)</field>
     <field name="yaw"   type="float">Yaw angle (rad)</field>
     <field name="rollspeed"  type="float">Roll angular speed (rad/s)</field>
     <field name="pitchspeed" type="float">Pitch angular speed (rad/s)</field>
     <field name="yawspeed"   type="float">Yaw angular speed (rad/s)</field>
   </message>

   <message name="LOCAL_POSITION" id="31">
     <description>The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame)</description>
     <field name="usec" type="uint64_t">Timestamp (microseconds since UNIX epoch or microseconds since system boot)</field>
     <field name="x"   type="float">X Position</field>
     <field name="y"   type="float">Y Position</field>
     <field name="z"   type="float">Z Position</field>
     <field name="vx"  type="float">X Speed</field>
     <field name="vy"  type="float">Y Speed</field>
     <field name="vz"  type="float">Z Speed</field>
   </message>
   
   <message name="GLOBAL_POSITION" id="33">
     <description>The filtered global position (e.g. fused GPS and accelerometers). Coordinate frame is right-handed, Z-axis up (GPS frame)</description>
     <field name="usec" type="uint64_t">Timestamp (microseconds since unix epoch)</field>
     <field name="lat"   type="float">Latitude, in degrees</field>
     <field name="lon"   type="float">Longitude, in degrees</field>
     <field name="alt"   type="float">Absolute altitude, in meters</field>
     <field name="vx"  type="float">X Speed (in Latitude direction, positive: going north)</field>
     <field name="vy"  type="float">Y Speed (in Longitude direction, positive: going east)</field>
     <field name="vz"  type="float">Z Speed (in Altitude direction, positive: going up)</field>
   </message>

   <message name="GPS_RAW" id="32">
     <description>The global position, as returned by the Global Positioning System (GPS). This is
NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame)</description>
     <field name="usec" type="uint64_t">Timestamp (microseconds since UNIX epoch or microseconds since system boot)</field>
     <field name="fix_type" type="uint8_t">0-1: no fix, 2: 2D fix, 3: 3D fix</field>
     <field name="lat"   type="float">Latitude in degrees</field>
     <field name="lon"   type="float">Longitude in degrees</field>
     <field name="alt"   type="float">Altitude in meters</field>
     <field name="eph"  type="float">GPS HDOP</field>
     <field name="epv"  type="float">GPS VDOP</field>
     <field name="v"  type="float">GPS ground speed</field>
     <field name="hdg"  type="float">Compass heading in degrees, 0..360 degrees</field>
   </message>

   <message name="SYS_STATUS" id="34">
     <description>The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows wether the system is currently active or not and if an emergency occured. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occured it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.</description>
     <field name="mode" type="uint8_t">System mode, see MAV_MODE ENUM in mavlink/include/mavlink_types.h</field>
     <field name="nav_mode" type="uint8_t">Navigation mode, see MAV_NAV_MODE ENUM</field>
     <field name="status" type="uint8_t">System status flag, see MAV_STATUS ENUM</field>
     <field name="load" type="uint16_t">Maximum usage in percent of the mainloop time, (0%: 0, 100%: 1000) should be always below 1000</field>
     <field name="vbat" type="uint16_t">Battery voltage, in millivolts (1 = 1 millivolt)</field>
     <field name="battery_remaining" type="uint16_t">Remaining battery energy: (0%: 0, 100%: 1000)</field>
     <field name="packet_drop" type="uint16_t">Dropped packets (packets that were corrupted on reception on the MAV)</field>
   </message>

   <message name="RC_CHANNELS_RAW" id="35">
     <description>The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.</description>
     <field name="chan1_raw" type="uint16_t">RC channel 1 value, in microseconds</field>
     <field name="chan2_raw" type="uint16_t">RC channel 2 value, in microseconds</field>
     <field name="chan3_raw" type="uint16_t">RC channel 3 value, in microseconds</field>
     <field name="chan4_raw" type="uint16_t">RC channel 4 value, in microseconds</field>
     <field name="chan5_raw" type="uint16_t">RC channel 5 value, in microseconds</field>
     <field name="chan6_raw" type="uint16_t">RC channel 6 value, in microseconds</field>
     <field name="chan7_raw" type="uint16_t">RC channel 7 value, in microseconds</field>
     <field name="chan8_raw" type="uint16_t">RC channel 8 value, in microseconds</field>
     <field name="rssi" type="uint8_t">Receive signal strength indicator, 0: 0%, 255: 100%</field>
   </message>

   <message name="RC_CHANNELS_SCALED" id="36">
     <description>The scaled values of the RC channels received. (-100%) -10000, (0%) 0, (100%) 10000</description>
     <field name="chan1_scaled" type="int16_t">RC channel 1 value scaled, (-100%) -10000, (0%) 0, (100%) 10000</field>
     <field name="chan2_scaled" type="int16_t">RC channel 2 value scaled, (-100%) -10000, (0%) 0, (100%) 10000</field>
     <field name="chan3_scaled" type="int16_t">RC channel 3 value scaled, (-100%) -10000, (0%) 0, (100%) 10000</field>
     <field name="chan4_scaled" type="int16_t">RC channel 4 value scaled, (-100%) -10000, (0%) 0, (100%) 10000</field>
     <field name="chan5_scaled" type="int16_t">RC channel 5 value scaled, (-100%) -10000, (0%) 0, (100%) 10000</field>
     <field name="chan6_scaled" type="int16_t">RC channel 6 value scaled, (-100%) -10000, (0%) 0, (100%) 10000</field>
     <field name="chan7_scaled" type="int16_t">RC channel 7 value scaled, (-100%) -10000, (0%) 0, (100%) 10000</field>
     <field name="chan8_scaled" type="int16_t">RC channel 8 value scaled, (-100%) -10000, (0%) 0, (100%) 10000</field>
     <field name="rssi" type="uint8_t">Receive signal strength indicator, 0: 0%, 255: 100%</field>
   </message>
   
     <message name="SERVO_OUTPUT_RAW" id="37">
    <description>The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.</description>
    <field name="servo1_raw" type="uint16_t">Servo output 1 value, in microseconds</field>
    <field name="servo2_raw" type="uint16_t">Servo output 2 value, in microseconds</field>
    <field name="servo3_raw" type="uint16_t">Servo output 3 value, in microseconds</field>
    <field name="servo4_raw" type="uint16_t">Servo output 4 value, in microseconds</field>
    <field name="servo5_raw" type="uint16_t">Servo output 5 value, in microseconds</field>
    <field name="servo6_raw" type="uint16_t">Servo output 6 value, in microseconds</field>
    <field name="servo7_raw" type="uint16_t">Servo output 7 value, in microseconds</field>
    <field name="servo8_raw" type="uint16_t">Servo output 8 value, in microseconds</field>
  </message> 

   <message name="WAYPOINT" id="39">
     <description>Message encoding a waypoint. This message is emitted to announce
     the presence of a waypoint and to set a waypoint on the system. The waypoint can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon. The global and body frame are related as: positive Z-down, positive X(front looking north, positive Y(body:right) looking east. Therefore y encodes in global mode the latitude, whereas x encodes the longitude and z the GPS altitude (WGS84).</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="seq" type="uint16_t">Sequence</field>
     <field name="frame" type="uint8_t">The coordinate system of the waypoint. see MAV_FRAME in mavlink_types.h</field>
     <field name="command" type="uint8_t">The scheduled action for the waypoint. see MAV_COMMAND in common.xml MAVLink specs</field>
     <field name="current" type="uint8_t">false:0, true:1</field>
     <field name="autocontinue" type="uint8_t">autocontinue to next wp</field>
     <field name="param1" type="float">PARAM1 / For NAV command waypoints: Radius in which the waypoint is accepted as reached, in meters</field>
     <field name="param2" type="float">PARAM2 / For NAV command waypoints: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds</field>
     <field name="param3" type="float">PARAM3 / For LOITER command waypoints: Orbit to circle around the waypoint, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.</field>
     <field name="param4" type="float">PARAM4 / For NAV and LOITER command waypoints: Yaw orientation in degrees, [0..360] 0 = NORTH</field>
     <field name="x" type="float">PARAM5 / local: x position, global: longitude</field>
     <field name="y" type="float">PARAM6 / y position: global: latitude</field>
     <field name="z" type="float">PARAM7 / z position: global: altitude</field>
   </message>

   <message name="WAYPOINT_REQUEST" id="40">
     <description>Request the information of the waypoint with the sequence number seq. The response of the system to this message should be a WAYPOINT message.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="seq" type="uint16_t">Sequence</field>
   </message>

  <message name="WAYPOINT_SET_CURRENT" id="41">
     <description>Set the waypoint with sequence number seq as current waypoint. This means that the MAV will continue to this waypoint on the shortest path (not following the waypoints in-between).</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="seq" type="uint16_t">Sequence</field>
   </message>

  <message name="WAYPOINT_CURRENT" id="42">
     <description>Message that announces the sequence number of the current active waypoint. The MAV will fly towards this waypoint.</description>
     <field name="seq" type="uint16_t">Sequence</field>
   </message>

  <message name="WAYPOINT_REQUEST_LIST" id="43">
     <description>Request the overall list of waypoints from the system/component.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
   </message>

   <message name="WAYPOINT_COUNT" id="44">
     <description>This message is emitted as response to WAYPOINT_REQUEST_LIST by the MAV. The GCS can then request the individual waypoints based on the knowledge of the total number of waypoints.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="count" type="uint16_t">Number of Waypoints in the Sequence</field>
   </message>

  <message name="WAYPOINT_CLEAR_ALL" id="45">
     <description>Delete all waypoints at once.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
   </message>

   <message name="WAYPOINT_REACHED" id="46">
     <description>A certain waypoint has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.</description>
     <field name="seq" type="uint16_t">Sequence</field>
   </message>

   <message name="WAYPOINT_ACK" id="47">
     <description>Ack message during waypoint handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="type" type="uint8_t">0: OK, 1: Error</field>
   </message>

   <message name="GPS_SET_GLOBAL_ORIGIN" id="48">
     <description>As local waypoints exist, the global waypoint reference allows to transform between the local coordinate frame and the global (GPS) coordinate frame. This can be necessary when e.g. in- and outdoor settings are connected and the MAV should move from in- to outdoor.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="global_x" type="uint32_t">global x position * 1E7</field>
     <field name="global_y" type="uint32_t">global y position * 1E7</field>
     <field name="global_z" type="uint32_t">global z position * 1000</field>
     <field name="local_x" type="float">local x position that matches the global x position</field>
     <field name="local_y" type="float">local y position that matches the global y position</field>
     <field name="local_z" type="float">local z position that matches the global z position</field>
   </message>
   
   <message name="GPS_LOCAL_ORIGIN_SET" id="49">
    <description>Once the MAV sets a new GPS-Local correspondence, this message announces the origin (0,0,0) position</description>
    <field name="latitude" type="int32_t">Latitude (WGS84), expressed as * 1E7</field>
    <field name="longitude" type="int32_t">Longitude (WGS84), expressed as * 1E7</field>
    <field name="altitude" type="int32_t">Altitude(WGS84), expressed as * 1000</field>
  </message>

   <message name="LOCAL_POSITION_SETPOINT_SET" id="50">
     <description>Set the setpoint for a local position controller. This is the position in local coordinates the MAV should fly to. This message is sent by the path/waypoint planner to the onboard position controller. As some MAVs have a degree of freedom in yaw (e.g. all helicopters/quadrotors), the desired yaw angle is part of the message.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="x" type="float">x position</field>
     <field name="y" type="float">y position</field>
     <field name="z" type="float">z position</field>
     <field name="yaw" type="float">Desired yaw angle</field>
   </message>

   <message name="LOCAL_POSITION_SETPOINT" id="51">
     <description>Transmit the current local setpoint of the controller to other MAVs (collision avoidance) and to the GCS.</description>
     <field name="x" type="float">x position</field>
     <field name="y" type="float">y position</field>
     <field name="z" type="float">z position</field>
     <field name="yaw" type="float">Desired yaw angle</field>
   </message>
   
   <message name="CONTROL_STATUS" id="52">
     <field name="position_fix" type="uint8_t">Position fix: 0: lost, 2: 2D position fix, 3: 3D position fix </field>
     <field name="vision_fix" type="uint8_t">Vision position fix: 0: lost, 1: 2D local position hold, 2: 2D global position fix, 3: 3D global position fix </field>
     <field name="gps_fix" type="uint8_t">GPS position fix: 0: no reception, 1: Minimum 1 satellite, but no position fix, 2: 2D position fix, 3: 3D position fix </field>
     <field name="ahrs_health" type="uint8_t">Attitude estimation health: 0: poor, 255: excellent</field>
     <field name="control_att" type="uint8_t">0: Attitude control disabled, 1: enabled</field>
     <field name="control_pos_xy" type="uint8_t">0: X, Y position control disabled, 1: enabled</field>
     <field name="control_pos_z" type="uint8_t">0: Z position control disabled, 1: enabled</field>
     <field name="control_pos_yaw" type="uint8_t">0: Yaw angle control disabled, 1: enabled</field>
   </message>
   
      <message name="SAFETY_SET_ALLOWED_AREA" id="53">
     <description>Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.</description>
     <field name="target_system" type="uint8_t">System ID</field>
     <field name="target_component" type="uint8_t">Component ID</field>
     <field name="frame" type="uint8_t">Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.</field>
     <field name="p1x" type="float">x position 1 / Latitude 1</field>
     <field name="p1y" type="float">y position 1 / Longitude 1</field>
     <field name="p1z" type="float">z position 1 / Altitude 1</field>
     <field name="p2x" type="float">x position 2 / Latitude 2</field>
     <field name="p2y" type="float">y position 2 / Longitude 2</field>
     <field name="p2z" type="float">z position 2 / Altitude 2</field>
   </message>
   
   <message name="SAFETY_ALLOWED_AREA" id="54">
     <description>Read out the safety zone the MAV currently assumes.</description>
     <field name="frame" type="uint8_t">Coordinate frame, as defined by MAV_FRAME enum in mavlink_types.h. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.</field>
     <field name="p1x" type="float">x position 1 / Latitude 1</field>
     <field name="p1y" type="float">y position 1 / Longitude 1</field>
     <field name="p1z" type="float">z position 1 / Altitude 1</field>
     <field name="p2x" type="float">x position 2 / Latitude 2</field>
     <field name="p2y" type="float">y position 2 / Longitude 2</field>
     <field name="p2z" type="float">z position 2 / Altitude 2</field>
   </message>

   <message name="ATTITUDE_CONTROLLER_OUTPUT" id="60">
     <description>The output of the attitude controller. This output is the control response the controller currently generates and the attitude the MAV would take if it is under control of the attitude controller. The primary use of this message is to check the response and signs of the controller before the actual flight.</description>
     <field name="enabled" type="uint8_t">1: enabled, 0: disabled</field>
     <field name="roll" type="int8_t">Attitude roll: -128: -100%, 127: +100%</field>
     <field name="pitch" type="int8_t">Attitude pitch: -128: -100%, 127: +100%</field>
     <field name="yaw" type="int8_t">Attitude yaw: -128: -100%, 127: +100%</field>
     <field name="thrust" type="int8_t">Attitude thrust: -128: -100%, 127: +100%</field>
   </message>

   <message name="POSITION_CONTROLLER_OUTPUT" id="61">
     <description>The output of the position controller. The primary use of this message is to check the response and signs of the controller before the actual flight.</description>
     <field name="enabled" type="uint8_t">1: enabled, 0: disabled</field>
     <field name="x" type="int8_t">Position x: -128: -100%, 127: +100%</field>
     <field name="y" type="int8_t">Position y: -128: -100%, 127: +100%</field>
     <field name="z" type="int8_t">Position z: -128: -100%, 127: +100%</field>
     <field name="yaw" type="int8_t">Position yaw: -128: -100%, 127: +100%</field>
   </message>
   
      <message name="NAV_CONTROLLER_OUTPUT" id="62">
     <description>Outputs of the APM navigation controller. The primary use of this message is to check the response and signs
of the controller before actual flight and to assist with tuning controller parameters </description>
     <field name="nav_roll" type="float">Current desired roll in degrees</field>
     <field name="nav_pitch" type="float">Current desired pitch in degrees</field>
     <field name="nav_bearing" type="int16_t">Current desired heading in degrees</field>
     <field name="target_bearing" type="int16_t">Bearing to current waypoint/target in degrees</field>
     <field name="wp_dist" type="uint16_t">Distance to active waypoint in meters</field>
     <field name="alt_error" type="float">Current altitude error in meters</field>
     <field name="aspd_error" type="float">Current airspeed error in meters/second</field>
     <field name="xtrack_error" type="float">Current crosstrack error on x-y plane in meters</field>
   </message> 
   
   <message name="POSITION_TARGET" id="63">
   <description>The goal position of the system. This position is the input to any navigation or path planning algorithm and does NOT represent the current controller setpoint.</description>
     <field name="x" type="float">x position</field>
     <field name="y" type="float">y position</field>
     <field name="z" type="float">z position</field>
     <field name="yaw" type="float">yaw orientation in radians, 0 = NORTH</field>
   </message>
   
   <message name="STATE_CORRECTION" id="64">
   <description>Corrects the systems state by adding an error correction term to the position and velocity, and by rotating the attitude by a correction angle.</description>
     <field name="xErr" type="float">x position error</field>
     <field name="yErr" type="float">y position error</field>
     <field name="zErr" type="float">z position error</field>
     <field name="rollErr" type="float">roll error (radians)</field>
     <field name="pitchErr" type="float">pitch error (radians)</field>
     <field name="yawErr" type="float">yaw error (radians)</field>
     <field name="vxErr" type="float">x velocity</field>
     <field name="vyErr" type="float">y velocity</field>
     <field name="vzErr" type="float">z velocity</field>
   </message>

   <message name="SET_ALTITUDE" id="65">
     <field name="target" type="uint8_t">The system setting the altitude</field>
     <field name="mode" type="uint32_t">The new altitude in meters</field>
   </message>

  <message name="REQUEST_DATA_STREAM" id="66">
     <field name="target_system" type="uint8_t">The target requested to send the message stream.</field>
     <field name="target_component" type="uint8_t">The target requested to send the message stream.</field>
     <field name="req_stream_id" type="uint8_t">The ID of the requested message type</field>
     <field name="req_message_rate" type="uint16_t">The requested interval between two messages of this type</field>
     <field name="start_stop" type="uint8_t">1 to start sending, 0 to stop sending.</field>
   </message>

   <message name="MANUAL_CONTROL" id="69">
     <field name="target" type="uint8_t">The system to be controlled</field>
     <field name="roll" type="float">roll</field>
     <field name="pitch" type="float">pitch</field>
     <field name="yaw" type="float">yaw</field>
     <field name="thrust" type="float">thrust</field>
     <field name="roll_manual" type="uint8_t">roll control enabled auto:0, manual:1</field>
     <field name="pitch_manual" type="uint8_t">pitch auto:0, manual:1</field>
     <field name="yaw_manual" type="uint8_t">yaw auto:0, manual:1</field>
     <field name="thrust_manual" type="uint8_t">thrust auto:0, manual:1</field>
   </message>

   <message name="GLOBAL_POSITION_INT" id="73">
     <description>The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up)</description>
     <field name="lat"   type="int32_t">Latitude / X Position, expressed as * 1E7</field>
     <field name="lon"   type="int32_t">Longitude / Y Position, expressed as * 1E7</field>
     <field name="alt"   type="int32_t">Altitude in meters, expressed as * 1000 (millimeters)</field>
     <field name="vx"  type="int16_t">Ground X Speed (Latitude), expressed as m/s * 100</field>
     <field name="vy"  type="int16_t">Ground Y Speed (Longitude), expressed as m/s * 100</field>
     <field name="vz"  type="int16_t">Ground Z Speed (Altitude), expressed as m/s * 100</field>
   </message>

  <message name="VFR_HUD" id="74">
     <description>Metrics typically displayed on a HUD for fixed wing aircraft</description>
     <field name="airspeed" type="float">Current airspeed in m/s</field>
     <field name="groundspeed" type="float">Current ground speed in m/s</field>
     <field name="heading" type="int16_t">Current heading in degrees, in compass units (0..360, 0=north)</field>
     <field name="throttle" type="uint16_t">Current throttle setting in integer percent, 0 to 100</field>
     <field name="alt" type="float">Current altitude (MSL), in meters</field>
     <field name="climb" type="float">Current climb rate in meters/second</field>
   </message> 
   
   <!-- MESSAGE IDs 80 - 250: Space for custom messages in individual projectname_messages.xml files -->




  <message name="DEBUG_VECT" id="251">
     <field name="name" type="char[10]">Name</field>
     <field name="usec" type="uint64_t">Timestamp</field>
     <field name="x" type="float">x</field>
     <field name="y" type="float">y</field>
     <field name="z" type="float">z</field>
   </message>

<message name="NAMED_VALUE_FLOAT" id="252">
     <description>Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.</description>
     <field name="name"  type="char[10]">Name of the debug variable</field>
     <field name="value"  type="float">Floating point value</field>
   </message>

<message name="NAMED_VALUE_INT" id="253">
     <description>Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.</description>
     <field name="name"  type="char[10]">Name of the debug variable</field>
     <field name="value"  type="int32_t">Signed integer value</field>
   </message>

  <message name="STATUSTEXT" id= "254">
    <description>Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).</description>
    <field name="severity" type="uint8_t">Severity of status, 0 = info message, 255 = critical fault</field>
    <field name="text" type="int8_t[50]">Status text message, without null termination character</field>
   </message>

<message name="DEBUG" id="255">
     <description>Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.</description>
     <field name="ind"  type="uint8_t">index of debug variable</field>
     <field name="value"  type="float">DEBUG value</field>
   </message>

</messages>
</mavlink>
